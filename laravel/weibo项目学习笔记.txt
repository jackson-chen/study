记录一下学习weibo项目的一些思考

【这个项目对那些功能】
1.静态页面
首页;
关于;
帮助;

2.用户功能
注册
邮件发送
用户激活
密码重置
个人中心
用户列表
用户删除

3.会话控制
登录
登出
记住我

4.微博数据
微博列表
发微博
删除微博

5.社交功能
关注用户
取消关注
关注和粉丝列表
社交统计
关注用户动态流

后期太回顾这块知识的时候，可以结合这些功能来加深印象




【创建应用】
1.在homestead.yaml配置虚拟域名和数据库
2.重启数据库并加载homestead.yaml文件   
  方案一：vagrant provision   && vagrant reload
  方案二：vagrant halt   && vagrant up  --provision
3.修改hosts文件  
   192.168.10.10   weibo.test

4.创建应用
  composer create-project laravel/laravel  weibo '6.*'

5.修改.env文件
  在.env文件中有数据库、队列、缓冲、会话等等配置信息
  这里我们主要是编辑数据库信息，host,username,password,dbname 
  其他的配置暂时用不到，可以不管

6.生成App Key
  php artisan  key:generate

7.访问项目
通过配置的虚拟域名访问项目，看看项目可以不可以访问
如果不能访问需要看是什么情况导致的

总结： 
创建应用是一个流程操作，不管是开发weibo也好，开发博客也好，都需要这些配置，来创建新的应用，基本上是不可以缺少的

对一些配置设置过后，可靠以后都不在需要了，比如git,composer,Github SSH key配置，这些信息一旦配置，以后就很少更改了

有些地方也不是很明白，比如homestead.yaml文件中的database这个选项就不是很明白，我认为在这里可以不需要设置数据库，在.env文件中就可以设置数据库配置信息。并且.env文件是不会推送到远程仓库的，远程仓库可能有自己的env信息

【静态页面】
这个章节主要是学习如何搭建静态页面

1.首先我们的所有操作是在子分支下进行的，会创建新的分支，代码的修改都在新分支下完成，最后在完成代码编写后，把分支中的内容合并到master分支，用到的命令:
git checkout master
git checkout -b staitc-pages
git merge static-pages
git branch 
git branch -d  static-pages


2.建立完分支后，需要建立路由，主要是通过url映射到控制器和方法，是web相关的路由，路由设置是在web.php文件中进行编写

Route::get('/about','StaticPagesController@about');


3.创建路由映射到的控制器，可以使用artisan提供的命令来创建控制器,php artisan make:controller  StaticPagesController,执行后就会创建一个控制器在Http/Controllers目录下，这个控制器默认会继承基控制器Controller，它们在同一个目录下，这样就可以使用基控制器中的方法和属性了

使用artisan命令必须是在项目的根目录执行，因为需要用到项目中的artisan
文件，其他目录下就访问不到这个文件了

4.创建路由绑定的方法
生成的控制器是没有方法的，需要我们去建立方法，这些方法必须是路由中绑定的方法，不然会提示方法不存在。方法的权限是public

在方法中如果要渲染页面，需要使用view()函数，第一个参数传递模板名，名字是目录加文件名的组合，比如index/index.blade.php文件，模板名就填写index/index即可，如果模板在views目录下，模板名就是index，总的来说就是填写相对于views目录的位置即可，不用填写绝对路径。

view函数的第二个方法是要传递到模板中的数据，如果模板没有用到数据可以不填写，如果要传递模板数据，这个参数必须是数组或者实现Arrayable接口的对象

5.创建模板
创建方法中渲染的页面，模板名就是方法中要渲染的模板名

一般我们会创建通用模板，然后让其他模板继承通用模板，以达到页面代码通用的效果，比如页面头部变化，其他页面也一起变化

首先会在views下创建layouts/defalut.balde.php模板，编写模板内容。然后让其他模板继承这个通用模板default.balde.php,在渲染其他模板的时候，会把通用模板中的内容填充到其他模板中

这里具体的做法不在阐述，可以结合laravel学习笔记来实现

6.代码纳入到版本控制
 我们编写的代码并没有纳入到git版本控制，需要使用命令添加到git仓库中
 git add -A
 git commit -m '基础页面' 


7.合并提交分支
   在编写完基础页面后，需要合并分支，并把提交记录推送到远程

   git checkout master
   git merge  static-pages
   git push  

【总结本章】
	经过本章节的学习，我们学到了以下内容：

	对新建的 Laravel 项目进行基本配置；
	手动创建静态视图、控制器；
	了解控制器与视图的基本协作流程；
	了解如何使用通用视图；
	了解 Artisan 命令的基本使用；
	
  本章的知识点，本章我们主要是从无到有的学习了laravel
  一开始没有weibo项目，建立了weibo项目，通过composer来创建应用
  创建应用后发现不能马上使用，需要配置开发环境，比如配置git，可以把代码推送到远程仓库，这些配置一旦设置，以后基本上就不用在操作了，除非你又创建了一个新的应用

  需要设置虚拟域名，域名设置有两个部分，第一个部分是设置homestead.yaml文件，设置访问的域名，域名访问的入口文件，这个其实设置的是Nginx服务器，只不过通过homestead可以快速的进行设置，还有需要设置数据库名，这里我觉得可以不加，加了好像没有什么作用，可以看下homestead的教程，是怎么东西。第二个部分是设置hosts文件，主要是把虚拟域名和ip地址做一个绑定，虚拟机的IP是192.168.10.10，这个是在配置中设置的，怎么配置我忘记了，可以看些homestead环境搭建

  在搭建完虚拟域名，需要更改.env文件中的设置，第一个是设置数据库访问的账户密码等信息，第二个是设置bug模式，app_key,app_name等信息，如果没有app_key通过artisan命令来生成appkey

  在设置完.env信息后，访问项目发现报错，这是为什么呢，目前还不知道，只有根据网上的解决方案，在composer.json文件中添加"symfony/translation",并使用composer update安装扩展， 之后项目就可以访问

  把所有的文件纳入到git版本控制器，git add -A,有的文件不需要跟踪修改，在.gitignore文件中添加它,这样就可以忽略他的修改了，比如.env文件就是一个忽略文件。并提交一个初始版本，推送到远程仓库

  接着就是项目的正式开发阶段，也没有太多的东西，创建git分支，创建路由，创建控制器，创建模板，通用模板，其他模板来继承通用模板，以达到模板中相同的代码共用的效果


  这个地方我个人认为比较难的是模板继承，以前没有用过这种方法，这种方法很简单，直接继承就可以了，在子模板就可以不用再写重复的代码了，这是非常好用的方式
  。在后面的学习中还有很多很多的公共模板，比如头像，比如错误信息，我们都用公共模板，然后再引入模板就可以实现模板共用

  在分支中开发代码，而不是在master分支中编写代码，这有别于现在用到的svn，对如何使用git还是有很多的问题，比如何时建立分支，冲突如何修改，各个命名在何使使用时最好的，这都是问题，这也不是一蹴而就的事情，我个人认为可以结合这个教程来学习如何使用git，而不用太关心git的内部机制是怎么样的，用起来，干就完事了

  这个章节的内容还是比较容易的，唯一比较耗时的应该是前期的配置，比如开发环境的配置，这个我们可以结合教程来做，项目运行前需要准备一下东西，比如虚拟域名，比如数据配置，比如appkey，比如引入其他扩展包，让框架不在报错，等等知识点，这些都是平常用到最多的，像环境搭建用到的还是比较的少，这个倒不是特别的多，配置一次以后都不在配置了

  总的来说我们学到这些知识，laravel项目架构，laravel控制器、模板引擎、命令行工具，git知识点，搭建一个特别简单的框架


【前端工作流总结】
laravel框架不同于其他的PHP框架，里面集成了很多的前端工具，这些工具对搭建和编写前端css,js会有很大的帮助，这块的功能也必须要用起来，但是在学习的时候呢，在npm,node.js这些地方始终会出现问题，这导致以往在这个地方都会卡壳，学习也遇到很多的问题，经过三次在这里出错，今天终于找到解决方法，也没有太难，如果方法错了，什么都错了

laravel中的mix有很多需要学习的地方，比如这里为什么要使用这些，可以不可以不使用，这里我昨天晚上也看了mix相关的资料，发现理解起来很难，这里有很多前端的知识点，不是那么容易了解，我的计划是暂时不看mix资料，先用起来，再看知识点，这样要号很多，比如npm，node.js怎么使用，入门就可以了，不用了解太多，还是以学习laravel为主，主要是了解前端工作流就可以了。具体遇到的问题我这里一下

首先还是先建立git分支，在分支下操作，git checkout -b  filling-layout-style，这一段的操作都是在filling-layout-style下完成的

需要引入bootstrap,引入bootstrap前，需要下载laravel/ui扩展，在使用php artisan ui bootstrap 引入bootstrap,这里还没有完成，需要使用npm来安装boostrap npm扩展包

在安装的时候会遇到问题，主要是npm install 安装不了扩展包，这里的做法是更新npm，具体的步骤这里重复一下，首先 sudo  npm cache clean -f 清除缓存，  sudo npm install -g n  sudo  n  stable 来升级npm。 之后删除不用的文件, rm -rf package-lock.json,node_modules, 最后 sudo npm cache clear -froce ， sudo npm install  --froce --no-bin-links，具体这些命令大致的意思知道，而如何为什么这么做还不太清楚

也可能在下一次的安装中用上面的方法可能解决不了问题，可以看下学习后的讨论，这里有很多的解决方法，总有一个是对的

安装完npm扩展包后，需要去编辑app.scss样式，或者编辑app.js，编辑后运行npm run dev来编译scss,js,生成后的文件放在public下，这个时候模板中就可以引用publicx下的静态资源了

这小节的内容是美化样式，所以回去修改default.balde.php,home.balde.php等模板文件，修改后需要编写app.scss，之后用npm run dev运行编译下即可

最后我们提交修改, git commit -m ''

【4章节 优化页面】
这个章节主要做的是静态页面的优化，主要是使用样式，了解了前端工作流，bootstrap,scss,npm,laravel mix,然后重构页面，建立的局部视图，使用了路由名称，替换掉页面上写死的链接，创建了注册控制器，路由，视图。最后遇到git冲突问题。我们一个个说

首先是页面样式，一看是静态页面是没有样式的，这里要添加样式，前端页面使用的是bootstrap框架，这个框架在laravel中需要使用npm来安装boostrap npm包，在这之前需要下载laravel ui扩展，这个扩展主要是用来引入boostrap，然后使用mix来编译，压缩scss,js文件，使用composer  require laravel/ui --dev 安装扩展包，只在开发环境使用，线上环境没有必要

然后使用artisan命令引入bootstrap，php artisan ui bootstrap ，引入bootstrap后，需要使用npm来安装扩展包，这里的扩展包不仅有boostrap，还有scss,jquery,mix等等，都是需要使用npm来安装，由于一些原因导致npm无法使用，所以需要先更新npm到最新，具体如下：  
sudo npm cache clean  -f
sudo npm install  -g n
n stable

升级npm后，需要删除本地的缓存包
rm -rf package-lock.json
rm -rf node_modules

安装扩展到node_modules目录
npm cache clean -f
npm install -f  --no-bin-links

安装完npm后就是写样式了，首先到resouces/sass/app.scss，删除除了@import '~bootstrap/scss/boostrap.scss'文件，之后编写的css都写在这个文件里面，最后通过npm run dev编译这个文件，生成一个app.css文件存放在public目录下

写完样式后就是编写视图，视图主要是使用boostrap前端框架，有header,body,footer，编写完后，运行npm run dev, 就会去执行webpack.mix.js文件，通过mix api去编译,压缩scss,js文件，最后生成编译后的文件到指定目录。这样基础页面的样式就建立好了

对视图，我们还不是很满意，基础视图中的内容太多了，我们把基础视图中容易变化，后期会差异化的视图移除，建立局部视图_header,_footer，然后在default视图引入局部视图,通过@include('layouts/_header')引入，以后修改只在_header,_footer
就可以，default页面就是整合这些视图的基础视图

之前的页面上的链接都是写死的，后期改动起来非常的麻烦了，使用laravel框架中的{{ route('home') }},使用前提是给每个路由添加名称，通过名称来使用路由，这样不管我们修改的是地址，还是控制器都可以修改，但是页面的链接不会失效，一样可以使用起来，非常的管用

浏览器缓存一致是一个问题，尤其是在开发阶段，laravel提供了非常优雅的方法，只需要修改webpack.mix.js，在mix.js('resouces/sass/app.scss','public/css').js('resources/js/app.js').version(),添加一个version就可以了，添加完后执行一个npm run dev，这样就会读取webpack.mix.js文件，通过文件中的内容来编译js,scss文件。laravel是怎么做的呢，就是在每次修改文件后会生成一个哈希值，跟在资源后面，在页面中使用{{ mix('css/app.css') }}，mix函数会根据webpack文件中的信息引入public中的静态资源，并加上哈希值来应对浏览器缓存

之后就是创建用户注册,路由，控制器，视图，链接信息,git commit 提交

接下来就是git checkout master分支， 但watch-poll运行的原因，resources目录下有修改，就会触发自动编译功能，导致生成新的app.css,app.js,这里需要丢掉工作区的修改， 需要用到git checkout ., 再使用git reset --hard ,是工作区和暂存区和上一个提交一致 ，对新增的文件使用 git clean -ndf 来删除就可以了

以上就是这个章节的总结，我们学习了laravel前端工作流，学习了局部视图，学习了浏览器缓存，学习了命名路由，学习了用户注册页面搭建，学习了git丢弃工作区的修改。还是比较基础的操作，但是经常会用到，就这样


【模型和数据库迁移】
在上一个章节中我们学习到了laravel前端工作流，建立局部视图，命令路由。这个章节主要讲解的是模型和数据库迁移，我们一个一个的说

模型，MVC模式中的M，也是非常重要的一部分，使用PHP原生的方式操作数据库不是很方面，而且重复的代码非常的多，针对这种情况，laravel实现一套对数据库表操作的 Eloquet ORM,一个模型类对应一个数据库表，一个模型实例对应数据表中的一行记录。

使用Eloquet模型也是非常的简单，php artisan make:model Models/User,就可以创建模型了， 创建的模型一般需要定义一些属性，比如fillable,hidden属性，定义这些属性相对你说比较安全

模型建立后就是模型的使用，比如，\App\Models\User::create()，等等这里简单列举一下
User::find(1);
User::all();
User::findOrFail(1);
user::where('id',2)->update(['name'=>'jack']);
$user= User::find(1); $user->name='jackson';$user->save();

总的来说现在用到模型的方法很少，只是比较初级的方法，后期在学习用户注册的时候，会学习到很多，这里先暂且了解一下。了解如何创建，如何定义，如何使用属性，如何查询，更新，删除等等操作，就可以了，暂时不做深入讨论


学习完模型后我们学习数据库迁移，数据库迁移可以通过代码来管理数据表结构，非常简单的就可以完成数据库表结构的操作，部署数据库也非常的简单，直接执行数据库迁移就可以，还可以回滚操作，这是直接使用数据库管理工具不能实现的操作，非常的好用，同时可以多个人同时操作，也不会有问题，下面列举一些长用到的命令

php  artisan  make:migration  create_articles_table 生成迁移文件
php  artisan  migrate  执行迁移文件
php  artisan  migrate:rollback  回滚迁移到上一个版本
php  artisan  migrate:refresh  重置数据库

之后就是了解tinker,tinker是一个命令行的编程环境，通过这个环境可以编写代码，执行代码后会把结果输出在命令行工具中，使用起来不要太爽，简易版的操作如下：
php artisan tinker  启动tinker

接下来在命令行中输入的代码都在tinker下执行并输出

我们发现表中新建的数据时间不正确，可以修改时间戳，具体操作如下，在.env中建立时间戳，TIMEZONE=PRC，DB_TIMEZONE=+08:00，在app.php中找到timezone选项，然后将值改为env('TIMEZONE','UTC'), 在database.php中在mysql下新建timezone值为env('DB_TIMEZONE'),这样就解决时间不一致的问题


【课程中点总结】

学到这里课程已经一半了，可以看到我们对以前的知识点学习的还是可以，比以前学习的方法要好很多，并且我们对每次学习后的知识做一下总结，虽然说不能完全记忆，但是至少可以操作一遍是没有问题的，这个我是可以保证的，除了前端html，css无法编写外，其他我还是可以的，通过这次的学习，我还是有很大的信心，学习热情也非常的高涨，一两天我可以弄完一个章节的内容，并且还在一直记录学习笔记

只要文中遇到的知识点，不管是难点也好，不难的问题，我都会记录在笔记中，现在回国头来还是可以的，我的计划是在学习完这个课程后，自己在做一遍，模板我会借用课程的，其他的地方完全由我来实现结合笔记来做，形成肌肉记忆，这个课程我就没有必要写3遍以上了，因为做笔记，章节总结，这些下来其实在脑海里已经复习过好几次了

记笔记有一个好的地方是在，我可以尝试的去总结，去回顾知识点，学习的时候可能知道，但是用自己的话说还是很难的，这样写一遍，用自己的话理解一遍非常的爽，不再担心学习后忘记的问题，对以往的知识我都知道大概，知道怎么做，虽然不能一五一十的完全记住，也不需要这么做。结合课程就知道该怎么做，一路下来踩的坑，遇到的问题我都记录在案，这都不算什么。

很开心这段时间的效率这么高，果然是有压力才会有动力，是有点累，但是坚持下去也是可以的，现在很开心。继续学习，我想在本周学习完这个课程，希望可以，早上还是继续做项目，测试，其他方面就是弄自己的东西，加油